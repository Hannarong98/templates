"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[781],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,g=d["".concat(c,".").concat(m)]||d[m]||l[m]||i;return t?r.createElement(g,a(a({ref:n},s),{},{components:t})):r.createElement(g,a({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3722:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],p={title:"TypeScript - Development Environment",sidebar_label:"Development Environment",slug:"/TypeScript/development-environment",sidebar_position:2},c=void 0,u={unversionedId:"TypeScript/developmentEnvironment",id:"TypeScript/developmentEnvironment",isDocsHomePage:!1,title:"TypeScript - Development Environment",description:"Configuring Nodemon",source:"@site/express/TypeScript/developmentEnvironment.mdx",sourceDirName:"TypeScript",slug:"/TypeScript/development-environment",permalink:"/express/TypeScript/development-environment",editUrl:"https://github.com/Intility/templates/tree/main/docusaurus/express/TypeScript/developmentEnvironment.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"TypeScript - Development Environment",sidebar_label:"Development Environment",slug:"/TypeScript/development-environment",sidebar_position:2},sidebar:"express",previous:{title:"Starting a new project",permalink:"/express/TypeScript/Starting-a-new-project"},next:{title:"Environment Variables",permalink:"/express/TypeScript/environment-variables"}},s=[{value:"Configuring Nodemon",id:"configuring-nodemon",children:[]},{value:"Configuring VS Code debugger",id:"configuring-vs-code-debugger",children:[]}],l={toc:s};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"configuring-nodemon"},"Configuring Nodemon"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://nodemon.io/"},"Nodemon")," is a tool used in your development environment to watch for changes in your project and hot reload the server when files are updated on save."),(0,i.kt)("p",null,"To configure nodemon you can create a ",(0,i.kt)("inlineCode",{parentName:"p"},"nodemon.json")," file at the project root level."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ignore": [\n        "**/*.test.ts",\n        "**/*.spec.ts",\n        ".git",\n        "node_modules"\n    ],\n    "watch": [\n        "src"\n    ],\n    // Script to be executed on nodemon start.\n    "exec": "node --inspect=5858 -r ts-node/register ./src/index.ts",\n    "ext": "ts"\n}\n')),(0,i.kt)("h2",{id:"configuring-vs-code-debugger"},"Configuring VS Code debugger"),(0,i.kt)("p",null,"Create a new file in ",(0,i.kt)("inlineCode",{parentName:"p"},".vscode/")," directory at root level called ",(0,i.kt)("inlineCode",{parentName:"p"},"launch.json"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "0.2.0",\n    "configurations": [\n        // Other debug configs\n        {\n            "type": "node",\n            "request": "launch",\n            "name": "Launch Program",\n            "runtimeArgs": [\n                "-r",\n                "ts-node/register"\n            ],\n            "args": [\n                "${workspaceFolder}/src/index.ts"\n            ]\n        }\n    ]\n}\n')),(0,i.kt)("p",null,"After creating this file you can execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"start:dev")," script you created in the previous step."),(0,i.kt)("p",null,"You can read more about configuring the VS Code debugger in this official documentation provided by VS Code: ",(0,i.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/nodejs/nodejs-debugging"},"Node.js debugging in VS Code")))}d.isMDXComponent=!0}}]);