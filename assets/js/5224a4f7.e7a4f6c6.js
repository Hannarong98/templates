"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7435],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,y=d["".concat(u,".").concat(f)]||d[f]||l[f]||o;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8435:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],s={title:"Security - Authentication",sidebar_label:"Authentication",slug:"/API/Security/Authentication",sidebar_position:1},u=void 0,p={unversionedId:"API/Security/Authentication",id:"API/Security/Authentication",title:"Security - Authentication",description:"NOTE: This assumes that you have an Azure AD application registration created for your project",source:"@site/express/API/Security/Authentication.mdx",sourceDirName:"API/Security",slug:"/API/Security/Authentication",permalink:"/express/API/Security/Authentication",editUrl:"https://github.com/Intility/templates/tree/main/docusaurus/express/API/Security/Authentication.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Security - Authentication",sidebar_label:"Authentication",slug:"/API/Security/Authentication",sidebar_position:1},sidebar:"express",previous:{title:"Event Grid (Metro)",permalink:"/express/API/Azure/Event-Grid"},next:{title:"Authorization",permalink:"/express/API/Security/Authorization"}},c=[],l={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"NOTE: This assumes that you have an Azure AD application registration created for your project")),(0,o.kt)("p",null,"In this example i'll configure an single tenant application"),(0,o.kt)("p",null,"For authentication well configure Passport to check and validate the token provided by the client."),(0,o.kt)("p",null,"Create a new file called ",(0,o.kt)("inlineCode",{parentName:"p"},"passport.ts")," inside the middlewares folder."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import passport from 'passport';\nimport { BearerStrategy, ITokenPayload, VerifyCallback } from 'passport-azure-ad';\n\nconst { APP_CLIENT_ID, INTILITY_TENANT_ID } = process.env;\n\n/**\n * Create a new passport BearerStrategy to handle authenticate and decoding of the provided token.\n * Complete setup documentation can be found here https://github.com/AzureAD/passport-azure-ad#42-bearerstrategy.\n */ \nconst mainStrategy = new BearerStrategy(\n    {\n        identityMetadata:\n            `https://login.microsoftonline.com/${INTILITY_TENANT_ID}/v2.0/.well-known/openid-configuration`,\n        clientID: `${APP_CLIENT_ID}`,\n        audience: [ `${APP_CLIENT_ID}`, `api://${APP_CLIENT_ID}` ],\n        loggingLevel: 'warn',\n        // Validate the `iss` claim in id_token against user provided issuer\n        validateIssuer: true,\n        // List of allowed issuers\n        issuer: [ `https://sts.windows.net/${INTILITY_TENANT_ID}/` ]\n    },\n    (token: ITokenPayload, done: VerifyCallback) => {\n        if (!token.oid) {\n            done(new Error('User OID is not found in token'));\n        } else {\n            done(null, token);\n        }\n    },\n);\n\n// Tell passport to use the configured strategy\npassport.use('mainStrategy', mainStrategy);\n\n/**\n * Use Passport to authenticate the token provided. \n * It is important that the label defined in passport.use function match the label provided here\n */\nexport const authenticate = passport.authenticate([ 'mainStrategy' ], { session: false });\n\n// export configures passport instance\nexport default passport;\n")),(0,o.kt)("p",null,"Now its time to configure Express to use the passport middleware. In your Express config file (",(0,o.kt)("inlineCode",{parentName:"p"},"config/app.ts"),") add the following code snippet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// const app = express();\n\n// activating auth on server\napp.use(passport.initialize());\napp.use(passport.session());\n")),(0,o.kt)("p",null,"Next and at last, secure your endpoints or express router by adding the middleware. e.g."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'router.get("/", authenticate, controller.getByOid);\nrouter.post("/", authenticate, controller.createNewUser);\n')))}d.isMDXComponent=!0}}]);