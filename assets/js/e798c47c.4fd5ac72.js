"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1994],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(r),f=s,m=d["".concat(l,".").concat(f)]||d[f]||c[f]||a;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7277:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var n=r(7462),s=r(3366),a=(r(7294),r(3905)),o=["components"],i={title:"API - Express",sidebar_label:"Express",slug:"/API/Express",sidebar_position:1},l=void 0,p={unversionedId:"API/express",id:"API/express",isDocsHomePage:!1,title:"API - Express",description:"Express is a web framework for Node that allows us to create a HTTP server where we can create our API.",source:"@site/express/API/express.mdx",sourceDirName:"API",slug:"/API/Express",permalink:"/express/API/Express",editUrl:"https://github.com/Intility/templates/tree/main/docusaurus/express/API/express.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"API - Express",sidebar_label:"Express",slug:"/API/Express",sidebar_position:1},sidebar:"express",previous:{title:"Introduction",permalink:"/express/"},next:{title:"Database",permalink:"/express/API/Database"}},u=[],c={toc:u};function d(e){var t=e.components,i=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Express is a web framework for Node that allows us to create a HTTP server where we can create our API."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/express"},"express")," - Express web framework for Node.js.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"npm install express")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@types/express"},"@types/express")," - Typings for Express.js.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"npm install -D @types/express")),(0,a.kt)("p",null,"Getting started with an Express app is fairly easy and can be done by a couple of lines of code. This is great if you want to test something, but larger enterprise applications require a more robust structural layered design. "),(0,a.kt)("p",null,"You can find the easy to follow getting started guide at Express' homepage: ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/en/starter/hello-world.html"},'"Express Hello World"'),". But in larger enterprise applications a more structured system is needed."),(0,a.kt)("p",null,"In this repo i'll follow a multi-layered API architecture which divides the API into 3 layers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Routes and Controllers - This is where you handle the incoming requests"),(0,a.kt)("li",{parentName:"ul"},"Services - Where you execute business logic on the entity, e.g. fetching other entities, calculating stuff."),(0,a.kt)("li",{parentName:"ul"},"Repositories and Providers - Where you execute requests and/or queries to the database.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Multilayer-api-architecture",src:r(2870).Z})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE: In this architecture it is important that the communication between each layer always flows downwards or sideways, never upwards. Like a service calling an controller.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"Project folder structure\nThis repository contains an example of an multilayered API design structure, as well as an example API for an User entity.\n\ud83d\udcc2 src\n\u2523 \ud83d\udcc2 routes\n\u2503 \u2517 \ud83d\udcdc baseRouter.ts        // This is where you will register all your routes, this router is exposed at `/api/v1`.\n\u2523 \ud83d\udcc2 controllers            // This is where you handle the incoming requests registered by the routers, only simple data validation is done at this level.\n\u2523 \ud83d\udcc2 services               // This is where you handle the more advanced business logic, like like logic that span across to other database entities.\n\u2523 \ud83d\udcc2 repository             // This is where you write the database CRUD-operations like database queries etc.\n\u2523 \ud83d\udcc2 models                 // This is where you define the Mongoose Schemas for validation.\n\u2523 \ud83d\udcc2 middlewares            // This is where you store all the custom express middlewares\n\u2523 \ud83d\udcc2 interfaces             // This is where you define all typescript interfaces, types, enums etc.\n\u2523 \ud83d\udcc2 utils                  // Other utility functions.\n\u2523 \ud83d\udcc2 config                 \n\u2503 \u2523 \ud83d\udcdc appInsights.ts       // Configuration of the App Insights framework.\n\u2503 \u2523 \ud83d\udcdc mongoose.ts          // Configuration of the Mongoose framework.\n\u2503 \u2517 \ud83d\udcdc app.ts               // Configuration the Express server.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"To get you started this template provides a User entity with CRUD routes, controller, service and a repository for this entity.")))}d.isMDXComponent=!0},2870:function(e,t,r){t.Z=r.p+"assets/images/Multilayer-api-architecture-8bfac785f1e947989cfeeca23b15d30f.png"}}]);